package studentExpense;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.Scanner;

import javax.xml.bind.DatatypeConverter;

class User {
	//user'ek ka ID=0 awa la rizi yakami file'i Users username u passwordakai anusret u dwaish la map'i Users "Key" yakai yaksana ba "0"
	//Wata Key map'akai == ba ID yakai wa == ba rizi yakami file'akai
	private String username;
	private String password;
	private int ID;
	private Double totalBil;

	User(String username, String password, int ID, Double totalBil) {
		this.username = username;
		this.password = password;
		this.ID = ID;
		this.totalBil = totalBil;
	}
	public String getUsername() {	return username;	}
	public String getPassword() {	return password;	}
	public int getID() {			return ID;			}
	public Double getTotalBil()	 {	return totalBil;	}
	
	public void setTotalBil(Double newTotalBil) {	this.totalBil = newTotalBil;	}
}

public class Methods {

	Scanner in = new Scanner(System.in);

	public String passwordHashin_MD5(String password) throws NoSuchAlgorithmException {
		MessageDigest md = MessageDigest.getInstance("MD5");
		md.update(password.getBytes());
		byte[] digest = md.digest();
		return DatatypeConverter.printHexBinary(digest).toUpperCase();
	}

	public void signUp() throws IOException, NoSuchAlgorithmException {
		String temp = "";
		Main.currentLoggedinUserID = 0 - 1;
		try (BufferedReader br = new BufferedReader(new FileReader(Main.fileUsers))) {
			while ((temp = br.readLine()) != null)
				Main.currentLoggedinUserID = Integer.parseInt(temp.split(",")[2]);
		}
		if (Main.currentLoggedinUserID+1 ==  Main.maxNumberOfUsers) {
			System.out.println("Maximum number of members reached");
			return;
		}
		BufferedWriter bw = new BufferedWriter(new FileWriter(Main.fileUsers, true));
		System.out.println("***************************************************");
		System.out.println("***************************************************");
		System.out.println("**                    Sign Up                    **");
		System.out.println("***************************************************");
		System.out.println("Enter your desired username: ");
		String userName = in.nextLine();
		System.out.println("Enter a password: ");
		String password = in.nextLine();
		System.out.println("***************************************************");
		System.out.println("***************************************************");
		System.out.println("\n\n\n");
		password=passwordHashin_MD5(password);//MD5
		bw.write(userName + "," + password + "," + (++Main.currentLoggedinUserID) + "," + 0);
		bw.newLine();
		bw.close();

		Main.users.put(Main.currentLoggedinUserID, new User(userName, password, Main.currentLoggedinUserID, 0d));

		loginInterface();
	}

	public void login() throws IOException, NoSuchAlgorithmException {
		////
		String temp=null;
		Main.currentLoggedinUserID=-1;
		try (BufferedReader br = new BufferedReader(new FileReader(Main.fileUsers))) {
			while ((temp = br.readLine()) != null)
				Main.currentLoggedinUserID = Integer.parseInt(temp.split(",")[2]);
		}//The codes inside the "////", first gets the highest ID from users file if couldn't find any, then the default current ID surely will be " -1 "
		if(Main.currentLoggedinUserID==-1) {
			System.out.println("No users have singup yet");
			return;
		}
		////
		String username;
		String password;			
		System.out.println("***************************************************");
		System.out.println("***************************************************");
		System.out.println("**                      Login                    **");
		System.out.println("***************************************************");
		System.out.println("Enter your username: ");
		username = in.nextLine();
		System.out.println("Enter your Password: ");
		password = in.nextLine();

		password=passwordHashin_MD5(password);//MD5
		for (int i = 0; i < Main.maxNumberOfUsers && Main.users.get(i).getUsername() != null; i++) {
			if (Main.users.get(i).getUsername().equals(username)) {
				if (Main.users.get(i).getPassword().equals(password)) {
					Main.currentLoggedinUserID = i;
					System.out.println("***************************************************");
					System.out.println("***************************************************\n\n");
					loginInterface();
					return;//so when a user logout s(6), so will this method
				}
			}
		}
		System.out.println("Wrong password or username. wait 4 seconds before trying again");
		System.out.println("***************************************************");
		System.out.println("***************************************************\n\n");
		try {	Thread.sleep(3500);	} catch (InterruptedException e) {		e.printStackTrace();	}
	}

	public void checkout() throws IOException {
		////
		String temp=null;
		try (BufferedReader br = new BufferedReader(new FileReader(Main.fileUsers))) {
			while ((temp = br.readLine()) != null)
				Main.currentLoggedinUserID = Integer.parseInt(temp.split(",")[2]);
	   }catch (IOException e) {	e.printStackTrace();	
	   }
		if(Main.currentLoggedinUserID != Main.maxNumberOfUsers-1) {
			System.out.println("Must have "+Main.maxNumberOfUsers+" registered users before Checkout");
			return;
		}
		////
		
		//2// resetting monthly checkout, when a user runs the program again a new date will be written in the file
		BufferedWriter bw = new BufferedWriter(new FileWriter(Main.fileMonthlyCheckout, false));//false == overwrite
		bw.write(0);
		bw.close();
		//2//
		
		try {	if (Main.fileCheckoutHistory.createNewFile()) 	System.out.println("Couldn't find CheckOutHistory file, as a result one has been created.");
		} catch (IOException e1) {	e1.printStackTrace();	}
		
		bw = new BufferedWriter(new FileWriter(Main.fileCheckoutHistory, true));
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
		Date dateObj = new Date();
		String date = dateFormat.format(dateObj);
		int OuterNum=0, InnerNum=0;
		String[] tempArray;
		String writtenToFile = "***************************************************\nDate of Checkout: "+date+"\n***************************************************\n";
		for (int i = 0; i < Main.users.size(); i++) {
			InnerNum=0;
			writtenToFile += ++OuterNum + "] User's name: " + Main.users.get(i).getUsername() + ", With a total bill of "
					+ Main.users.get(i).getTotalBil() + "\n";
			for (int j = 0; j < Main.items.get(i).size(); j++) {
				if(Main.items.get(i).get(j).length()!=0) {
					tempArray = Main.items.get(i).get(j).split(",");
					writtenToFile += "\t"+ ++InnerNum + ") item's name: " + tempArray[0] + ", Item's price: " + tempArray[1]
							+ " hazar, Item's quantity: " + tempArray[2] + " kilo/dana, date of purchase: " + tempArray[3]+"\n";
				}
			}
			System.out.println("\n");
		}
		writtenToFile += "***************************************************\n\n";
		bw.write(writtenToFile);
		bw.close();

		Double avg = 0d;
		for (int i = 0; i < Main.users.size(); i++)		avg += Main.users.get(i).getTotalBil();
		avg = avg / Main.users.size();
		int times = 0;//if all of them Bill becomes 0 after substracting average, then it means all paid the same bill
		for (int i = 0; i < Main.users.size(); i++) { Main.users.get(i).setTotalBil(Main.users.get(i).getTotalBil()-avg);	if(Main.users.get(i).getTotalBil()==0d) times++;     }
		
		while(true) {
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("**                     Checkout                  **");
			System.out.println("***************************************************");
			int num=0;
			Double tempDifference = 0d;
			Double toBePaid=null;
			Double remaining=null;
			System.out.println("Checkout is in procces, The Checkout's details and history will be added to a file named CheckOutHistory.\n");
			if(times==Main.users.size()) {    System.out.println("All users had the same Tottal Bill, So no one pays another");          }
			for (int i = 0; i < Main.users.size(); i++) {
				for (int j = 0; j < Main.users.size(); j++) {
					tempDifference = Main.users.get(i).getTotalBil()+Main.users.get(j).getTotalBil() ;
					if(   (i!=j)   &&     (Main.users.get(i).getTotalBil()<0)  &&  (Main.users.get(j).getTotalBil() > 0)  ) {
						
						toBePaid = Math.abs(Main.users.get(i).getTotalBil()) < Math.abs(Main.users.get(j).getTotalBil()) ? Math.abs(Main.users.get(i).getTotalBil()) : Main.users.get(j).getTotalBil();
						remaining = Math.abs(Main.users.get(i).getTotalBil()) > Math.abs(Main.users.get(j).getTotalBil()) ? 0 : tempDifference;
						
						Main.users.get(i).setTotalBil(   Math.abs(Main.users.get(i).getTotalBil()) < Math.abs(Main.users.get(j).getTotalBil()) ? 0 : tempDifference      );
						Main.users.get(j).setTotalBil(   Math.abs(Main.users.get(i).getTotalBil()) > Math.abs(Main.users.get(j).getTotalBil()) ? 0 : tempDifference   );
						
						System.out.println(++num+") "+Main.users.get(i).getUsername() + " will have to pay "
								+ toBePaid + " Hazar to " + Main.users.get(j).getUsername()
								+ " to make it such, " + Main.users.get(j).getUsername() + " remining balance to get paid be " + remaining +" Hazars");
					}
				}
			}	
			System.out.println("***************************************************");
			System.out.println("**          [1] Go Back To Home Screen           **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			
			try {	overWrite_FileUsers_FromMap();	} catch (IOException e) {	e.printStackTrace();	}
			for (int i = 0; i < Main.users.size(); i++)
				try {	Main.currentLoggedinUserID=i;	DeleteItem();	} catch (IOException e) {	e.printStackTrace();	}
			
			String choice=null;
			do {		choice = in.nextLine().trim();	} while (! choice.equals("1"));
			System.out.println("\n\n\n");
			switch (Integer.parseInt(choice)) {
			case 1:		return;
			}			
		}
	}
	
	public void loginInterface() throws IOException {
		String choice = "";
		while (true) {
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("		Welcome: " + Main.users.get(Main.currentLoggedinUserID).getUsername());
			System.out.println("***************************************************");
			System.out.println("**                  [1] Add Item                 **");
			System.out.println("**                  [2] Delete My Items           **");
			System.out.println("**                  [3] View My Bill             **");
			System.out.println("**                  [4] View All Bills           **");
			System.out.println("**                  [5] View CheckOut            **");
			System.out.println("**                  [6] LogOut(Return)           **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			do {	choice = in.nextLine().trim();	} while (!(  choice.equals("1") || choice.equals("2") || choice.equals("3") || choice.equals("4") || choice.equals("5") || choice.equals("6") )  );
			System.out.println("\n\n\n");
			switch (Integer.parseInt(choice)) {
			case 1:	AddItem();	break;
			case 2:	DeleteItem();	break;
			case 3:	ViewMyBill();	break;
			case 4:	ViewAllBills();	break;
			case 5:	viewCheckOut();	break;
			case 6:	return;
			}
			System.out.println("\n\n");
		}
	}

	private void overWrite_FileItems_FromLinkedList() throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter(Main.fileItems, false));// false == overwrites
		for (int i = 0; i < Main.items.size(); i++) {
			for (int j = 0; j < Main.items.get(i).size(); j++) {
				if (Main.items.get(i).get(j).length() != 0) {
					bw.write(Main.items.get(i).get(j) + "|");
				}
			}
			bw.newLine();
		}
		bw.close();
	}

	private void overWrite_FileUsers_FromMap() throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter(Main.fileUsers, false));
		for (int i = 0; i < Main.maxNumberOfUsers && (Main.users.get(i).getUsername() != null); i++) {
			bw.write(Main.users.get(i).getUsername() + "," 
		+ Main.users.get(i).getPassword() + ","
		+ Main.users.get(i).getID() + "," 
		+ Main.users.get(i).getTotalBil());
			bw.newLine();
		}
		bw.close();
	}
	
	public static boolean isNumeric(String str) {
		try {	Double.parseDouble(str);	return true;
		} catch (NumberFormatException e) {	return false;	}
	}

	private void AddItem() throws IOException {
		System.out.println("main " + Main.currentLoggedinUserID);
		String name = "", price = "", quantity = "", date = "";
		System.out.println("Enter the 'name' of the Item you want to add");
		name = in.nextLine();

		do {	System.out.println("Enter the 'price' of the Item you want to add");	price = in.nextLine().trim();
		} while (!isNumeric(price));// loops until a number is entered

		do {	System.out.println("Enter the 'quantity' of the Item you want to add");	quantity = in.nextLine().trim();
		} while (!isNumeric(quantity));// loops until a number is entered

		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
		Date dateObj = new Date();
		date = dateFormat.format(dateObj);

		Main.items.get(Main.currentLoggedinUserID).addLast(name + "," + price + "," + quantity + "," + date);
		overWrite_FileItems_FromLinkedList();

		Main.users.get(Main.currentLoggedinUserID)
				.setTotalBil(Main.users.get(Main.currentLoggedinUserID).getTotalBil() + Integer.parseInt(price));
		overWrite_FileUsers_FromMap();
			
	}


	private void DeleteItem() throws IOException {

		if (Main.items.get(Main.currentLoggedinUserID) != null)
			Main.items.remove(Main.currentLoggedinUserID);
		Main.items.add(Main.currentLoggedinUserID, new LinkedList<String>());

		overWrite_FileItems_FromLinkedList();

		Main.users.get(Main.currentLoggedinUserID).setTotalBil(0d);
		overWrite_FileUsers_FromMap();
	}

	private void ViewMyBill() {
		String[] tempArray;
		while (true) {
			System.out.println("\n\n");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("**                  View My Bill                 **");
			System.out.println("***************************************************");
			System.out.println("Bills Of: " + Main.users.get(Main.currentLoggedinUserID).getUsername());
			for (int i = 0; i < Main.items.get(Main.currentLoggedinUserID).size(); i++) {
				if(Main.items.get(Main.currentLoggedinUserID).get(i).length() != 0) {
					tempArray = Main.items.get(Main.currentLoggedinUserID).get(i).split(",");
					System.out.println("Name Of Item: " + tempArray[0] 
							+ "|| Price Of Item: " + tempArray[1] + " hazazr"
							+ "|| Quantity Of Item: " + tempArray[2] + " dana/kilo" 
							+ "|| Date Of Purchase: " + tempArray[3]);
				}
			}
			System.out.println(Main.users.get(Main.currentLoggedinUserID).getUsername() + "'s Total Bill: "
					+ Main.users.get(Main.currentLoggedinUserID).getTotalBil() + " Hazar");
			System.out.println("***************************************************");
			System.out.println("**          [1] Go Back To Home Screen           **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			String choice = "";
			do {	choice = in.nextLine().trim();	} while (! choice.equals("1"));
			System.out.println("\n\n\n");
			switch (Integer.parseInt(choice)) {
			case 1:	return;
			}
		}
	}

	private void ViewAllBills() {
		String[] tempArray;
		while (true) {
			System.out.println("\n\n");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("**                View All Bills                 **");
			System.out.println("***************************************************");
			for (int i = 0; i < Main.items.size() && Main.users.get(i).getUsername() != null; i++) {
				System.out.println("Bills Of: " + Main.users.get(i).getUsername());
				for (int j = 0; j < Main.items.get(i).size() ; j++) {
					if(Main.items.get(i).get(j).length() != 0) {
						tempArray = Main.items.get(i).get(j).split(",");
						System.out.println("Name Of Item: " + tempArray[0] 
								+ "|| Price Of Item: " + tempArray[1] + " hazazr"
								+ "|| Quantity Of Item: " + tempArray[2] + " dana/kilo" 
								+ "|| Date Of Purchase: "+ tempArray[3]);
					}
				}				
				System.out.println(Main.users.get(i).getUsername() + "'s Total Bill: " + Main.users.get(i).getTotalBil()
						+ " Hazar\n");
			}
			System.out.println("***************************************************");
			System.out.println("**          [1] Go Back To Home Screen           **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			String choice = "";
			do {		choice = in.nextLine().trim();	} while (! choice.equals("1"));
			System.out.println("\n\n\n");
			switch (Integer.parseInt(choice)) {
			case 1:		return;
			}
		}
	}

	private void viewCheckOut() {
		////
		String temp=null; 
		try (BufferedReader br = new BufferedReader(new FileReader(Main.fileUsers))) {
			while ((temp = br.readLine()) != null)
				Main.currentLoggedinUserID = Integer.parseInt(temp.split(",")[2]);
	   }catch (IOException e) {	e.printStackTrace();	}
		if(Main.currentLoggedinUserID != Main.maxNumberOfUsers-1) {
			System.out.println("Must have "+Main.maxNumberOfUsers+" registered users before viewing Checkout");
			return;
		}
		////
		Double avg = 0d;
		for (int i = 0; i < Main.users.size(); i++)		avg += Main.users.get(i).getTotalBil();
		avg = avg / Main.users.size();
 
		int times = 0;//if all of them Bill becomes 0 after substracting average, then it means all paid the same bill
		Double[] tempArray = new Double[Main.users.size()];//we want to show how the checkout will look like when it's done, not the actual checkout that is why we copy the bills to this array and edit them below.
		for (int i = 0; i < Main.users.size(); i++) {    tempArray[i]=Main.users.get(i).getTotalBil()-avg;   if(Main.users.get(i).getTotalBil()==0d) times++;   }
		
		Double tempDifference = 0d;
		while(true) {
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("**                View Checkout                  **");
			System.out.println("***************************************************");
			int num=0;
			Double toBePaid=null;
			Double remaining=null;
			System.out.println("This is how the checkout would look like when you actually do it. \n");
			if(times==Main.users.size()) {    System.out.println("All users had the same Tottal Bill, So no one pays another");     }
			for (int i = 0; i < tempArray.length; i++) {
				for (int j = 0; j < tempArray.length; j++) {
					tempDifference=tempArray[i]+tempArray[j] ;
					if(   (i!=j)   &&     (tempArray[i]<0)  &&  (tempArray[j]> 0)  ) {
						
						toBePaid = Math.abs(tempArray[i]) < Math.abs(tempArray[j]) ? Math.abs(tempArray[i]) : tempArray[j];
						remaining = Math.abs(tempArray[i]) > Math.abs(tempArray[j]) ? 0 : tempDifference;
						
						tempArray[i] = Math.abs(tempArray[i]) < Math.abs(tempArray[j]) ? 0 : tempDifference ;
						tempArray[j] = Math.abs(tempArray[i]) > Math.abs(tempArray[j]) ? 0 : tempDifference ;
						
				
						System.out.println(++num+") "+Main.users.get(i).getUsername() + " will have to pay "
								+ toBePaid + " Hazar to " + Main.users.get(j).getUsername()
								+ " to make it such, " + Main.users.get(j).getUsername() + " remining balance to get paid be " + remaining +" Hazars");
					}
				}
			}
			System.out.println("***************************************************");
			System.out.println("**          [1] Go Back To Home Screen           **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			
			String choice=null;
			do {		choice = in.nextLine().trim();	} while (!choice.equals("1"));// loops until a number is entered
			System.out.println("\n\n\n");
			switch (Integer.parseInt(choice)) {
			case 1:		return;
			}
		}
	}	
}
