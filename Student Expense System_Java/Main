package studentExpense;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Scanner;

public class Main {
	static File path = new File("C:\\Users\\balen\\OneDrive\\Desktop\\Assignment\\Student Espense System");////Tanha am path'a pewisti ba gorina////
	
	public static  File fileMonthlyCheckout = new File(path+"\\monthly_Checkout.txt");
	public static  File fileUsers = new File(path+"\\Users.txt");//har rizi User'eka //username,password,ID,Totalbill// data'kan ba "," jya krawnato
	public static  File fileItems = new File(path+"\\Items.txt");//har rizi Item'i User'eka //ItemName,ItemPrice,ItemQuantity,Date// data'i Item ka ba "," jya krawnato
	//bas kate ka 2 item i habe awa ba "|" jya akreno  //tamata,2,1,Date|pskit,2,1,Date//
	public static  File fileCheckoutHistory = new File(path+"\\CheckOutHistory.txt");
	
	public static int maxNumberOfUsers=4;////Changing it will the maximum members allowed to sign up, And other things accordingly to keep it dynamic////
	public static int currentLoggedinUserID;

	public static Map<Integer, User> users= new HashMap<>();//Integer >> Key >> ID of User
	public static LinkedList<LinkedList<String>> items = new LinkedList<>();
	
	static Scanner in = new Scanner(System.in);
	
	
	
	private static void forcedMonthlyCheckout() throws IOException {
		Methods obj = new Methods();
		String choice="";
		while(true) { 
			System.out.println("****************************************************");
			System.out.println("****************************************************");
			System.out.println("**               Monthly Checkout                 **");
			System.out.println("****************************************************");
			System.out.println("**                  [1]Checkout                   **");
			System.out.println("****************************************************");
			System.out.println("**More than a month has passed since last checkout**");
			System.out.println("****************************************************");
			System.out.println("****************************************************");
			do{choice=in.nextLine().trim();}
			while (!(  choice.equals("1")  ) );
			switch(Integer.parseInt(choice)) {
			case 1:   obj.checkout(); return;
			}
			System.out.println("\n\n\n");	
		}
	}
	
	public static void main(String[] args) throws IOException, NoSuchAlgorithmException {
		
		//Folder'ek drust akat law path'a agar nabu u agar habu awa hich naka
		if(path.mkdirs())  System.out.println("Couldn't find Student Espense System Folder, as a result one has been created.");
		
		//1//The File's createNewFile() method creates a new, empty file named by the pathname if a file with this name does not yet exist.
		if (fileUsers.createNewFile()) 	System.out.println("Couldn't find Users file, as a result one has been created.");
		if (fileItems.createNewFile()) 	System.out.println("Couldn't find Items file, as a result one has been created.");
		if (fileMonthlyCheckout.createNewFile()) 	System.out.println("Couldn't find Monthly Checkout file, as a result one has been created.");
		//1//
		
		String[] tempArray;
		String temp="";
		
		//2//User's File >> Map(Users)
		BufferedReader br= new BufferedReader(new FileReader(fileUsers));
		for(int i=0; i<maxNumberOfUsers; i++) {
			temp=br.readLine();
			if(temp!=null) {
				tempArray=temp.split(",");
				users.put(  i, new User(tempArray[0], tempArray[1], Integer.parseInt(tempArray[2]), Double.parseDouble(tempArray[3]))  );
			}else {
				users.put( i, new User(null, null, i, 0d));
			}
		}	br.close();
		//2// 
			
		
		
		//3//  Item's File >> LinkedList<LinkedList<String>>
		br= new BufferedReader(new FileReader(Main.fileItems));
		for (int i = 0; i < maxNumberOfUsers; i++) { 
			items.add(new LinkedList<String>());
			temp=br.readLine();
			if(temp!=null) {
			tempArray=temp.split("\\|");//need to escape "|" because it means or and have special effects
				for (int j = 0; j < tempArray.length; j++) {
					items.get(i).add(tempArray[j]);
				}
			}
		}	br.close();
		//3//
		
		//4//Monthly Checkout
		br= new BufferedReader(new FileReader(fileMonthlyCheckout));
		temp= br.readLine();  
		br.close();
		DateFormat dateFormat = new SimpleDateFormat("dd/MM/yy");//1==month//2==year
		Date dateObj = new Date();
		String[] currentDateArray;
		if(temp==null ||temp.length() < 5) {//three possibilities//written "0" in it after a previous checkout, a date or even null// 5 because it's a round* number
			BufferedWriter bw = new BufferedWriter(new FileWriter(fileMonthlyCheckout, false));// false == overwrites
			bw.write(   dateFormat.format(dateObj)    );
			bw.close();
		}else {
			String[] filetDateArray = temp.split("/");
			currentDateArray = dateFormat.format(dateObj).split("/");
			if(   Integer.parseInt(currentDateArray[2]) > Integer.parseInt(filetDateArray[2])  )  
				forcedMonthlyCheckout();//more than a year
			
			else if(   Integer.parseInt(currentDateArray[2]) == Integer.parseInt(filetDateArray[2])   ) { //same year
				if(   (  Integer.parseInt(currentDateArray[1]) - Integer.parseInt(filetDateArray[1])  ) > 1       )  
					forcedMonthlyCheckout();//more than one month
				else if(   ((  Integer.parseInt(currentDateArray[1]) - Integer.parseInt(filetDateArray[1])  ) == 1 ) && (  Integer.parseInt(currentDateArray[0]) > Integer.parseInt(filetDateArray[0])  )     )//month + 1day
					forcedMonthlyCheckout();
			}
			else System.out.println("Monthly checkout's time hasn't came up yet");
		}
		//4//
		
		Methods obj = new Methods();
		in = new Scanner(System.in);
		String choice="";
		exitProgram:
		while(true) { 
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			System.out.println("**            Student Expense System             **");
			System.out.println("***************************************************");
			System.out.println("**                  [1]Sign Up                   **");
			System.out.println("**                  [2]Login                     **");
			System.out.println("**                  [3]Checkout                  **");
			System.out.println("**                  [4]Exit                      **");
			System.out.println("***************************************************");
			System.out.println("***************************************************");
			do{choice=in.nextLine().trim();}
			while (!(  choice.equals("1") || choice.equals("2") || choice.equals("3") || choice.equals("4")  ) );
			System.out.println("\n\n\n");
			switch(Integer.parseInt(choice)) {
			case 1:  obj.signUp(); break;  
			case 2:  obj.login(); break;  
			case 3:  obj.checkout();  break;    
			case 4:  break exitProgram;  
			}
			System.out.println("\n\n");	
		}
		
		
	}


}
